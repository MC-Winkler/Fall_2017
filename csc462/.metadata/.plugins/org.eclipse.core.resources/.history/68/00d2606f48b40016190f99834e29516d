package edu.elon.math;

import java.lang.reflect.Method;
import java.util.ArrayList;

public class ModelImplementation implements ModelInterface {

	private double operandOne;
	private double operandTwo;
	private String currentValue;
	private String operation;
	private ArrayList<CalculatorObserver> observers;
	
	@Override
	public void setOperandOneCurrent() {
		operandOne = Double.parseDouble(currentValue);
	}
	
	public void setOperandTwoCurrent() {
		operandTwo = Double.parseDouble(currentValue);
	}
	
	@Override
	public void numberPressed(String input) {
		currentValue += input;
		notifyObservers();
	}

	@Override
	public void divide() {
		currentValue = Double.toString(operandOne / operandTwo);
		notifyObservers();
	}

	@Override
	public void multiply() {
		currentValue = Double.toString(operandOne * operandTwo);
		notifyObservers();
	}

	@Override
	public void subtract() {
		currentValue = Double.toString(operandOne - operandTwo);
		notifyObservers();
	}

	@Override
	public void add() {
		currentValue = Double.toString(operandOne + operandTwo);
		notifyObservers();
	}

	@Override
	public void solve() {
		Method operationToCompute;
		try {
			operationToCompute = this.getClass().getMethod(operation);
			operationToCompute.invoke(this, null);
		} catch (Exception e) {
			e.printStackTrace();
		}
		notifyObservers();
	}

	@Override
	public void decimalPoint() {
		if (!currentValue.contains(".")){
			currentValue += ".";
			notifyObservers();
		}
	}

	@Override
	public void registerObserver(CalculatorObserver o) {
		observers.add(o);
	}

	@Override
	public void removeObserver(CalculatorObserver o) {
		observers.remove(o);
	}

	@Override
	public void notifyObservers() {
		for (CalculatorObserver o : observers){
			o.update();
		}
	}

	@Override
	public String getCurrentValue() {
		return currentValue;
	}
	
	
	

}
